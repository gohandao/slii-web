import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { useRouter } from "next/router";

import React, { useState, useEffect, useContext } from "react";

import { CreatorList } from "@/components/CreatorList";
import { CollectionTable } from "@/components/CollectionTable";
import { SearchArea } from "@/components/SearchArea";

import { BreadCrumbs } from "@/components/BreadCrumbs";

import { Mainvisual } from "@/components/Mainvisual";
import { ShowMore } from "@/components/ShowMore";
import { Pagination } from "@/components/Pagination";
import { BaseLayout } from "@/components/BaseLayout";
import { IndexTab } from "@/components/IndexTab";
import { Hr } from "@/components/Hr";
import { Title } from "@/components/Title";
import { LinkButton } from "@/components/LinkButton";

import { TagList } from "@/components/TagList";

import {
  CreatorTagsContext,
  CollectionTagsContext,
} from "@/contexts/TagsContext";
import { CreatorsContext } from "@/contexts/CreatorsContext";
import { BaseContext } from "@/contexts/BaseContext";
import { UtilitiesContext } from "@/contexts/UtilitiesContext";

import { Tag } from "@/types/tag";
import { Searchbox } from "@/components/Searchbox";
import { AllList } from "@/components/AllList";
import { Tab } from "@/components/Tab";
import { SplitLayout } from "@/components/SplitLayout";
import { Dropdown } from "@/components/Dropdown";
import { FaLongArrowAltDown } from "react-icons/fa";
import { BsArrowDown, BsArrowUp } from "react-icons/bs";
import { TbArrowBigDownLine, TbArrowBigUpLine } from "react-icons/tb";
import { setParams } from "@/utilities/setParams";
import { OrderButton } from "@/components/OrderButton";

const Home: NextPage = () => {
  const router = useRouter();
  const { order, sortBy, term, page, type } = router.query;
  const currentPage = page ? Number(page) : 1;
  const limit = 10;

  const { creators, collections, OSCollections, creatorTags, collectionTags } =
    useContext(BaseContext);
  const { setHeaderIcon } = useContext(UtilitiesContext);

  // const {  } = useContext(BaseContext);
  //console.log("index collections");
  //console.log(collections);

  // const CreatorTags = useContext(CreatorTagsContext);
  // const CollectionTags = useContext(CollectionTagsContext);

  const creatorsLength = creators.length;
  const collectionsLength = collections.length;
  const creatorTagsLength = creatorTags.length;
  const collectionTagsLength = collectionTags.length;
  //const [filteredCreatorTags, setFilteredCreatorTags] = useState<Tag[]>([]);
  //const [filteredCollectionTags, setFilteredCollectionTags] = useState<Tag[]>([]);

  let origin_filteredCreatorTags: Tag[] = [];
  for (let i = 0; i < 2; i++) {
    origin_filteredCreatorTags = [
      ...origin_filteredCreatorTags,
      creatorTags[i],
    ];
  }
  const filteredCreatorTags = Array.from(new Set(origin_filteredCreatorTags));

  let origin_filteredCollectionTags: Tag[] = [];
  for (let i = 0; i < 2; i++) {
    origin_filteredCollectionTags = [
      ...origin_filteredCollectionTags,
      collectionTags[i],
    ];
  }
  const filteredCollectionTags = Array.from(
    new Set(origin_filteredCollectionTags)
  );

  //const collectionTagLength = CreatorTags.length;

  //const filteredCreatorTags = CreatorTags.splice(0, 2);
  //const filteredCollectionTags = CreatorTags && CreatorTags.splice(0, 2);

  /*useEffect(() => {
    for (let i = 0; i < 2; i++) {
      setFilteredCreatorTags([...filteredCreatorTags, CreatorTags[i]]);
    }
  }, []);*/

  useEffect(() => {
    setHeaderIcon({
      title: "",
      emoji: "",
      avatar: "",
      path: "/",
    });
  }, []);

  return (
    <div>
      <Head>
        <title>
          NFT OTAKU | Search Japanese NFT creators, projects, collections.
        </title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <SplitLayout>
        <section className="mx-auto">
          <div className="relative flex gap-5 z-20 justify-between mb-3">
            <Dropdown position="left" property="creatorType" />
            <div className="flex items-center gap-3">
              <Dropdown position="right" property="creatorSort" />
              <OrderButton />
            </div>
            {/*<Button filter="all" />
            <Button filter="creator" />
      <Button filter="project" />*/}
          </div>
          <div className="flex gap-3 mb-2">
            <div className="flex gap-3 items-baseline">
              {/* <Title property="h2" addClass="">
                  <span className="text-2xl mr-2">ðŸ”Ž</span>Find now!!
                </Title> */}
              <p className="text-gray-500 text-sm">{creatorsLength} Creators</p>
            </div>
          </div>
          <div className="mb-6">
            {creators.length > 0 && (
              <CreatorList creators={creators} limit={limit} />
            )}
          </div>
          {/*<div className="mb-10 flex gap-5 items-baseline">
            {filteredCreatorTags && (
              <TagList tags={filteredCreatorTags} type="creator" />
            )}
            <Link href="/tags">
              <a className="mb-2">
                <span className="text-gray-900">+ {creatorTagsLength - 2}</span>
                <span className="text-gray-400 ml-2 ">Creator Tags</span>
              </a>
            </Link>
            </div>*/}
          <div className="flex justify-center">
            <Pagination
              currentPage={currentPage}
              length={creatorsLength}
              limit={limit}
            />
            {/* <LinkButton href="/creators">Check all creators</LinkButton> */}
          </div>
        </section>
        {/*<div className="flex flex-col gap-10 px-5 mx-auto max-w-7xl">
          <div className="mx-auto">
            <ShowMore currentPage={page ? Number(page) : 1} />
          </div>
  </div>*/}
      </SplitLayout>
    </div>
  );
};

export default Home;

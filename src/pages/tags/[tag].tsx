import type { NextPage, GetStaticProps, GetStaticPaths } from "next";
import { ParsedUrlQuery } from "node:querystring";

import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";

import React, { useContext } from "react";

import { CreatorsContext } from "@/contexts/CreatorsContext";
import { CollectionsContext } from "@/contexts/CollectionsContext";

import { CreatorList } from "@/components/CreatorList";
import { CollectionTable } from "@/components/CollectionTable";
import { SearchArea } from "@/components/SearchArea";

import { Mainvisual } from "@/components/Mainvisual";
import { ShowMore } from "@/components/ShowMore";
import { Pagination } from "@/components/Pagination";
import { BaseLayout } from "@/components/BaseLayout";
import { IndexTab } from "@/components/IndexTab";
import { Hr } from "@/components/Hr";
import { Title } from "@/components/Title";
import { LinkButton } from "@/components/LinkButton";

const TagPage: NextPage = () => {
  const router = useRouter();
  const { tag, page } = router.query;
  const creators = useContext(CreatorsContext);
  const collections = useContext(CollectionsContext);

  const filteredCreators = creators.filter(
    //@ts-ignore
    (item) => item.tags && item.tags.includes(tag) == true
  );
  const filteredCollection = collections.filter(
    //@ts-ignore
    (item) => item.tags && item.tags.includes(tag) == true
  );
  const testasync = async () => {
    const AIRTABLE_API_KEY = process.env.NEXT_PUBLIC_AIRTABLE_API_KEY;

    const response01 = await fetch(
      `https://api.airtable.com/v0/appFYknMhbtkUTFgt/creator_tags?api_key=${AIRTABLE_API_KEY}`
    );
    const response02 = await fetch(
      `https://api.airtable.com/v0/appFYknMhbtkUTFgt/collection_tags?api_key=${AIRTABLE_API_KEY}`
    );
    //const { records } = await response01.json();
    const json01 = await response01.json();
    const json02 = await response02.json();
    const tags = [...json01.records, ...json02.records];
    //const { records } = (await response01.json()) + response02.json();
    //const { records02 } = await response02.json();

    console.log("zoo");
    console.log(tags);
    //const tags = [records01, records02];
  };
  //testasync();
  return (
    <div>
      <Head>
        <title>Gachi | Search your favorite anime op and ed animation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BaseLayout>
        <section className="mx-auto max-w-7xl mt-12">
          <h1>Resulut of {tag}</h1>
        </section>

        <section className="mx-auto max-w-7xl mt-12">
          <Title property="h2" addClass="mb-5">
            Creators
          </Title>
          <div className="mb-10">
            {filteredCreators && <CreatorList creators={filteredCreators} />}
          </div>
        </section>
        <Hr />
        <section className="mx-auto max-w-7xl">
          <Title property="h2" addClass="mb-5">
            Collections
          </Title>{" "}
          <div className="mb-10">
            {filteredCollection && (
              <CollectionTable collections={filteredCollection} />
            )}
          </div>
        </section>
        {/*<div className="flex flex-col gap-10 px-5 mx-auto max-w-7xl">
          <div className="mx-auto">
            <ShowMore currentPage={page ? Number(page) : 1} />
          </div>
  </div>*/}
      </BaseLayout>
    </div>
  );
};

export default TagPage;

export const getStaticPaths = async () => {
  const AIRTABLE_API_KEY = process.env.NEXT_PUBLIC_AIRTABLE_API_KEY;
  const response01 = await fetch(
    `https://api.airtable.com/v0/appFYknMhbtkUTFgt/creator_tags?api_key=${AIRTABLE_API_KEY}`
  );
  const response02 = await fetch(
    `https://api.airtable.com/v0/appFYknMhbtkUTFgt/collection_tags?api_key=${AIRTABLE_API_KEY}`
  );
  const json01 = await response01.json();
  const json02 = await response02.json();
  const tags = [...json01.records, ...json02.records];
  return {
    paths: tags.map((tag: any) => `/tags/${tag.fields.name}`),
    //fallback: false,
    fallback: "blocking",
  };
};

type PathProps = {
  ogImageUrl: string;
};
type Params = ParsedUrlQuery & {
  slug: string;
};

export const getStaticProps: GetStaticProps<PathProps, Params> = async ({
  params,
}) => {
  const AIRTABLE_API_KEY = process.env.NEXT_PUBLIC_AIRTABLE_API_KEY;
  const response01 = await fetch(
    `https://api.airtable.com/v0/appFYknMhbtkUTFgt/creator_tags?api_key=${AIRTABLE_API_KEY}`
  );
  const response02 = await fetch(
    `https://api.airtable.com/v0/appFYknMhbtkUTFgt/collection_tags?api_key=${AIRTABLE_API_KEY}`
  );
  const json01 = await response01.json();
  const json02 = await response02.json();
  const tags = [...json01.records, ...json02.records];
  const tag_name = params && params.tag;
  const tag = tags.filter((tag: any) => tag.fields.name === tag_name);
  let baseUrl;
  if (process.env.NODE_ENV != "test") {
    baseUrl = {
      production: "https://gachi.vercel.app",
      development: "http://localhost:3000",
    }[process.env.NODE_ENV];
  }
  return {
    props: {
      // OGP画像は絶対URLで記述する必要があります
      ogImageUrl: `${baseUrl}/api/ogp?key=${tag}&page=tags`,
      revalidate: 10,
    },
  };
};

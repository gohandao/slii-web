import { useState, useEffect, SetStateAction, useContext } from "react";
import { getImageUrl, supabase } from "@/libs/supabase";
import { BaseLayout } from "@/components/BaseLayout";
import Head from "next/head";
import Link from "next/link";
import imageCompression from "browser-image-compression";

import { Input } from "@/components/Input";
import { UploadImage } from "@/components/UploadImage";
import { AuthContext } from "@/contexts/AuthContext";

type UpdateProps = {
  username: string;
  //website: string
  avatar_url: string;
};
import { v4 as uuidv4 } from "uuid";
import { UtilitiesContext } from "@/contexts/UtilitiesContext";
import { UploadBackground } from "@/components/UploadBackground";
import { HiOutlineUserCircle } from "react-icons/hi";
import { RiMapPinUserLine, RiUser3Line } from "react-icons/ri";
import { BiUser } from "react-icons/bi";
import { TbUser } from "react-icons/tb";
import { FaRegUser } from "react-icons/fa";
import { Textarea } from "@/components/Textarea";
import { CgUserlane } from "react-icons/cg";
import router, { Router } from "next/router";

export default function Account() {
  const { setHeaderIcon } = useContext(UtilitiesContext);

  useEffect(() => {
    setHeaderIcon({
      title: "Account",
      emoji: "",
      element: <CgUserlane />,
      avatar: "",
      path: `/account`,
    });
  }, []);

  const { user, profile, avatar, setAvatar } = useContext(AuthContext);
  const [newAvatar, setNewAvatar] = useState<File>();
  const [label, setLabel] = useState<string>();
  const [description, setDescription] = useState<string>();
  const [background, setBackground] = useState<File>();
  const [newBackground, setNewBackground] = useState<File>();
  const [loading, setLoading] = useState(false);
  // const [avatar, setAvatar] = useState<File>();
  const [email, setEmail] = useState<string>("");
  const [username, setUsername] = useState<string>("");
  //const [website, setWebsite] = useState<string>('')
  const [avatarUrl, setAvatarUrl] = useState<string>("");

  const options = {
    maxSizeMB: 1, // 最大ファイルサイズ
    maxWidthOrHeight: 80, // 最大画像幅もしくは高さ
  };
  // const file = await imageCompression(images[0].files[0], options);

  useEffect(() => {
    if (user) {
      setEmail(user.email);
    }
    if (profile) {
      setUsername(profile.username);
      setAvatarUrl(profile.avatar_url);

      let background_blob;
      const getBackgroundBlob = async () => {
        background_blob =
          profile &&
          profile.background_url &&
          (await getImageUrl(profile.background_url));
        setBackground(background_blob);
      };
      getBackgroundBlob();
    }
  }, [user, profile]);

  const uploadImage = async (image: File, path: string) => {
    const uuid = uuidv4();

    const { data, error } = await supabase.storage
      .from(path)
      .upload(`public/${uuid}.jpg`, image, {
        cacheControl: "3600",
        upsert: false,
      });
    return data;
  };
  const updateProfile = async () => {
    try {
      setLoading(true);
      const user = supabase.auth.user();
      let new_avatar_url;
      let new_background_url;
      if (user) {
        if (avatar) {
          new_avatar_url = await uploadImage(avatar, "avatars");
          new_avatar_url = new_avatar_url?.Key;
        }
        if (background) {
          new_background_url = await uploadImage(background, "public");
          new_background_url = new_background_url?.Key;
        }
        const updates = {
          id: user.id,
          username: username,
          label: label,
          description: description,
          background_url: new_background_url,
          avatar_url: new_avatar_url,
          updated_at: new Date(),
        };

        let { error } = await supabase.from("profiles").upsert(updates, {
          returning: "minimal", // Don't return the value after inserting
        });
        alert("upload success");

        if (error) {
          throw error;
        }
      }
    } catch (error: any) {
      alert(error.message);
    } finally {
      setLoading(false);
      //location.reload();
    }
  };

  return (
    <div>
      <Head>
        <title>Anisonar | Search your favorite anime op and ed animation</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <BaseLayout>
        <div className="mt-8 px-5">
          <div className="relative bg-gray-800 max-w-3xl mx-auto pt-16 pb-10 px-5 md:px-20 lg:px-28 rounded overflow-hidden">
            <div className="absolute w-full left-0 top-0 h-[120px] flex justify-center items-center">
              <UploadBackground
                image={background}
                newImage={background}
                setNewImage={setBackground}
              />
            </div>
            <div className="mb-3 flex">
              <UploadImage
                image={avatar}
                newImage={newAvatar}
                setNewImage={setNewAvatar}
              />
            </div>
            <div className="mb-5">
              <Input
                label="Email"
                id="email"
                type="email"
                placeholder="sample@nftotaku.xyz"
                value={email}
                onChange={setEmail}
              />
            </div>
            <div className="mb-5">
              <Input
                label="Username"
                id="username"
                type="text"
                value={username}
                placeholder="Minimum 4 characters"
                onChange={setUsername}
              />
              <Link href={`https://nftotaku.xyz/${username}`}>
                <a className="inline-block text-blue-500 underline hover:no-underline mt-1 text-sm">
                  https://nftotaku.xyz/{username}
                </a>
              </Link>
            </div>
            <div className="mb-5">
              <Input
                label="Label"
                id="label"
                type="text"
                value={label}
                placeholder="NFT Collecter"
                onChange={setLabel}
              />
            </div>
            <div className="flex flex-col gap-1">
              <p className="text-gray-100">Description</p>
              <Textarea
                id="description"
                required={false}
                maxLength={200}
                text={description}
                setText={setDescription}
              />
            </div>
            {/* <div className="">
              <div className="bg-gray-700 px-5 py-2 rounded mt-8 mb-4">
                <p className="text-gray-200 text-center ">Verified user only</p>
              </div>
              <div className="mb-5">
                <Input
                  label="Twitter ID"
                  id="email"
                  type="email"
                  value={email || ""}
                  onChange={setEmail}
                />
              </div>
              <div className="mb-5">
                <Input
                  label="Instagram ID"
                  id="email"
                  type="email"
                  value={email || ""}
                  onChange={setEmail}
                />
              </div>
              <div className="mb-5">
                <Input
                  label="Discord URL"
                  id="email"
                  type="email"
                  value={email || ""}
                  onChange={setEmail}
                />
              </div>
              <div className="mb-5">
                <Input
                  label="Website URL"
                  id="email"
                  type="email"
                  value={email || ""}
                  onChange={setEmail}
                />
              </div>
            </div> */}
            <div className="flex gap-5 justify-center items-center mt-6">
              <button
                className="w-[120px] sm:w-[200px] py-3 px-5 rounded bg-gray-600 text-gray-300 border-b-[6px] border-gray-700"
                onClick={() => router.back()}
              >
                Back
              </button>
              <button
                className="w-[120px] sm:w-[200px] py-3 px-5 rounded bg-green-600 text-green-100  border-b-[6px] border-green-800"
                onClick={() => updateProfile()}
                disabled={loading}
              >
                {loading ? "Loading ..." : "Save"}
              </button>
            </div>
          </div>
        </div>
      </BaseLayout>
    </div>
  );
}
